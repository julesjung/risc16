pub enum Instruction {
    Add { rd: usize, ra: usize, rb: usize },
    AddWithCarry { rd: usize, ra: usize, rb: usize },
    Subtract { rd: usize, ra: usize, rb: usize },
    SubtractWithBorrow { rd: usize, ra: usize, rb: usize },
    And { rd: usize, ra: usize, rb: usize },
    Or { rd: usize, ra: usize, rb: usize },
    Xor { rd: usize, ra: usize, rb: usize },
    Not { rd: usize, ra: usize },
    LogicalLeftShift { rd: usize, rs: usize, imm: u16 },
    LogicalRightShift { rd: usize, rs: usize, imm: u16 },
    ArithmeticRightShift { rd: usize, rs: usize, imm: u16 },
    RotateRight { rd: usize, rs: usize, imm: u16 },
    AddImmediate { rd: usize, imm: u16 },
    SubImmediate { rd: usize, imm: u16 },
    Compare { ra: usize, rb: usize },
    CompareLowBytes { ra: usize, rb: usize },
    CompareHighBytes { ra: usize, rb: usize },
    CompareImmediateWithLowByte { rs: usize, imm: u16 },
    CompareImmediateWithHighByte { rs: usize, imm: u16 },
    MoveImmediateToLowByte { rd: usize, imm: u16 },
    MoveImmediateToHighByte { rd: usize, imm: u16 },
    LoadWord { rd: usize, rs: usize },
    LoadToLowByte { rd: usize, rs: usize },
    LoadToHighByte { rd: usize, rs: usize },
    StoreWord { rs: usize, rd: usize },
    StoreFromLowByte { rs: usize, rd: usize },
    StoreFromHighByte { rs: usize, rd: usize },
    JumpToOffset { offset: i16 },
    JumpToPointer { rs: usize },
    BranchIfCarry { offset: i16 },
    BranchIfNotCarry { offset: i16 },
    BranchIfOverflow { offset: i16 },
    BranchIfNotOverflow { offset: i16 },
    BranchIfZero { offset: i16 },
    BranchIfNotZero { offset: i16 },
    BranchIfSigned { offset: i16 },
    BranchIfNotSigned { offset: i16 },
    Halt,
}
